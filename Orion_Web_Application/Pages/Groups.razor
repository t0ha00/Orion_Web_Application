@page "/groups"

@using SqlDataAccessLibrary.Data
@using SqlDataAccessLibrary.Models
@using MudBlazor.Services
@implements IAsyncDisposable

@inject NavigationManager NavigationManager;
@inject ISubdivisionData _subdivisions;
@inject IEmployeeData _employees;
@inject IMainGroupsTableData _groups;

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>


@if (employees == null && subdivisions == null)
{
    <div class="loading-spinner"></div>
}
else if (subdivisions?.Count > 0 && employees?.Count == 0)
{
    <MudPaper Style="max-width:200px;">
        <MudContainer Style="max-width:200px;">
            <MudSelect Label="Подразделение" ValueChanged="(int i) => OnChangeValueSubdivision(i)" Value="@subdivisionId" Style="width:200px; max-width:200px;">
                @foreach(var subdivision in subdivisions)
                {
                    <MudSelectItem T="int" Value="@subdivision.Код">@subdivision.Имя</MudSelectItem>
                }
            </MudSelect>
        </MudContainer>
    </MudPaper>
}
else if (subdivisions?.Count > 0 && employees?.Count > 0 && groups == null)
{
    <MudPaper>
        <div style="display:inline-flex;">
            <MudSelect Label="Подразделение" ValueChanged="(int i) => OnChangeValueSubdivision(i)" Value="@subdivisionId" Style="width:200px; max-width:200px; display:flex;">
                @foreach(var subdivision in subdivisions)
                {
                    <MudSelectItem T="int" Value="@subdivision.Код">@subdivision.Имя</MudSelectItem>
                }
            </MudSelect>
            <br>
            <MudTable Items="employees" Hover="true" @ref="mudTable" OnRowClick="SelectionWorkerChanged" T="EmployeeModel" RowClassFunc="@SelectedRowClassFunc" Style="max-width:350px;"
                    FixedHeader="true" Height="@((height - 75) + "px")">
                    <HeaderContent>
                        <MudTh>ФИО</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ФИО" Style="text-align:left">@(context.ФИО.Split(' ')[0] + " " + context.ФИО.Split(' ')[1][0] + '.' + ' ' + context.ФИО.Split(' ')[2][0] + '.')</MudTd>
                    </RowTemplate>
                </MudTable>
            </div>

        </MudPaper>
}
else if (subdivisions?.Count > 0 && employees?.Count > 0 && groups?.Count > 0)
{
    <MudPaper>
        <MudDrawer @bind-Open="@open" Width="300px" Height="100%" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
            <MudDrawerHeader>
                <MudText>Свойста группы @choosenGroup</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Href=@("/group/" + choosenGroup)>Общее</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudStack Row="true">
            <MudSelect Label="Подразделение" ValueChanged="(int i) => OnChangeValueSubdivision(i)" Value="@subdivisionId" Style="width:100px;">
                @foreach(var subdivision in subdivisions)
                {
                    <MudSelectItem T="int" Value="@subdivision.Код">@subdivision.Имя</MudSelectItem>
                }
            </MudSelect>
            <MudTable Items="employees" Hover="true" @ref="mudTable" OnRowClick="SelectionWorkerChanged" T="EmployeeModel" RowClassFunc="@SelectedRowClassFunc" Style="width:350px;"
                    FixedHeader="true" Height="@((height - 75) + "px")">
                <HeaderContent>
                    <MudTh Style="width:200px">ФИО</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ФИО" Style="text-align:left">@(context.ФИО.Split(' ')[0] + " " + context.ФИО.Split(' ')[1][0] + '.' + ' ' + context.ФИО.Split(' ')[2][0] + '.')</MudTd>
                </RowTemplate>
            </MudTable>
                <MudTable Items="groups" Hover="true" OnRowClick="OpenGroup" T="MainGroupsTableInfoModel" FixedHeader="true" Height="@((height - 130) + "px")">
                    <ColGroup>
                        <col style="width: 60px;"/>
                        <col style="width: 50%;"/>
                        <col/>
                        <col/>
                        <col/>
                        <col/>
                        <col/>
                        <col/>
                        <col/>
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Название группы</MudTh>
                        <MudTh>Учен</MudTh>
                        <MudTh>Начало</MudTh>
                        <MudTh>Практ</MudTh>
                        <MudTh>Окончание</MudTh>
                        <MudTh>Ч.тр.</MudTh>
                        <MudTh>Ч.пр.</MudTh>
                        <MudTh>Тип</MudTh>
                        </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.id</MudTd>
                        <MudTd DataLabel="Название группы">@context.Программа_обучения</MudTd>
                        <MudTd DataLabel="Учен">@context.Учен</MudTd>
                        <MudTd DataLabel="Начало">@context.Нач</MudTd>
                        <MudTd DataLabel="Практ">@context.Практ</MudTd>
                        <MudTd DataLabel="Окончание">@context.Окончание</MudTd>
                        <MudTd DataLabel="Ч.тр.">@context.Теор</MudTd>
                        <MudTd DataLabel="Ч.пр.">@context.Час_практики</MudTd>
                        <MudTd DataLabel="Тип">@context.Тип</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                </MudTable>
            </MudStack>
        </MudPaper>
}

@code
{
    int subdivisionId = 2;
    private int selectedRowNumber = -1;
    int choosenGroup;

    private MudTable<EmployeeModel>? mudTable;
    private List<SubdivisionModel>? subdivisions;
    private List<EmployeeModel>? employees;
    private List<MainGroupsTableInfoModel>? groups;


    protected override async Task OnInitializedAsync()
    {
        subdivisions = await _subdivisions.GetAllSubdivisions();
        employees = await _employees.GetEmployeeByCodeSubdivision(subdivisionId);
    }

    private string SelectedRowClassFunc(EmployeeModel employee, int rowNum)
    {
        if (selectedRowNumber == rowNum)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(employee))
        {
            selectedRowNumber = rowNum;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    public async void OnChangeValueSubdivision(int i)
    {
        subdivisionId = i;
        employees?.Clear();
        employees = await _employees.GetEmployeeByCodeSubdivision(subdivisionId);
        this.StateHasChanged();
    }

    public async void SelectionWorkerChanged(TableRowClickEventArgs<EmployeeModel> args)
    {
        if (args != null)
        {
            groups?.Clear();

            groups = await _groups.getAllGroupsForMainTable(args.Item.Код);
            this.StateHasChanged();  
        }
    }

    public void OpenGroup(TableRowClickEventArgs<MainGroupsTableInfoModel> args)
    {
        var group = args.Item as MainGroupsTableInfoModel;
        if (group != null)
        {
            choosenGroup = group.id;
            OpenDrawer(Anchor.End);
        }
    }

    //Размеры окна 

    [Inject] IResizeService ResizeService { get; set; }

    int width = 0;
    int height = 0;

	private Guid _subscriptionId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
			_subscriptionId = await ResizeService.Subscribe((size) =>
			{
				width = size.Width;
				height = size.Height;
				InvokeAsync(StateHasChanged);
			}, new ResizeOptions
			{
				ReportRate = 50,
				NotifyOnBreakpointOnly = false,
			});

            var size = await ResizeService.GetBrowserWindowSize();
            height = size.Height;
            width = size.Width;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await ResizeService.Unsubscribe(_subscriptionId);

    //Вылезающая менюшка

    bool open;
    Anchor anchor;
    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }
}  