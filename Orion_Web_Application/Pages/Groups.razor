@page "/groups"

@using SqlDataAccessLibrary.Data
@using SqlDataAccessLibrary.Models



@inject NavigationManager NavigationManager;
@inject ISubdivisionData _subdivisions;
@inject IEmployeeData _employees;
@inject IMainGroupsTableData _groups;

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>


@if (employees == null && subdivisions == null)
{
    <div class="loading-spiner"></div>
}
else if (subdivisions?.Count > 0 && employees?.Count == 0)
{
    <div class="div1">
        <div class="div2" style="max-width: 200px;">
            <MudSelect Label="Подразделение" ValueChanged="(int i) => OnChangeValueSubdivision(i)" Value="@subdivisionId">
                @foreach(var subdivision in subdivisions)
                {
                    <MudSelectItem T="int" Value="@subdivision.Код">@subdivision.Имя</MudSelectItem>
                }
            </MudSelect>
            </div>
</div>
}
else if (subdivisions?.Count > 0 && employees?.Count > 0 && groups == null)
{
    <div class="div1">
        <div class="div2" style="max-width: 200px;">
            <MudSelect Label="Подразделение" ValueChanged="(int i) => OnChangeValueSubdivision(i)" Value="@subdivisionId">
                @foreach(var subdivision in subdivisions)
                {
                    <MudSelectItem T="int" Value="@subdivision.Код">@subdivision.Имя</MudSelectItem>
                }
            </MudSelect>
            <MudTable Items="employees" Hover="true" @ref="mudTable" Breakpoint="Breakpoint.Sm" OnRowClick="SelectionWorkerChanged" T="EmployeeModel" RowClassFunc="@SelectedRowClassFunc">
                    <HeaderContent>
                        <MudTh style="width:200px">ФИО</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ФИО" style="text-align:left">@(context.ФИО.Split(' ')[0] + " " + context.ФИО.Split(' ')[1][0] + '.' + ' ' + context.ФИО.Split(' ')[2][0] + '.')</MudTd>
                    </RowTemplate>
                </MudTable>
            </div>

        </div>
}
else if (subdivisions?.Count > 0 && employees?.Count > 0 && groups?.Count > 0)
{
    <div class="div1" style="display:flex">
        <div class="div2" style="max-width: 200px; margin-top:8px;">
            <MudSelect Label="Подразделение" ValueChanged="(int i) => OnChangeValueSubdivision(i)" Value="@subdivisionId">
                @foreach(var subdivision in subdivisions)
                {
                    <MudSelectItem TValue="int" Value="@subdivision.Код">@subdivision.Имя</MudSelectItem>
                }
            </MudSelect>
            <MudTable Items="employees" Hover="true" @ref="mudTable" Breakpoint="Breakpoint.Sm" OnRowClick="SelectionWorkerChanged" T="EmployeeModel" RowClassFunc="@SelectedRowClassFunc">
                <HeaderContent>
                    <MudTh style="width:200px">ФИО</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ФИО" style="text-align:left">@(context.ФИО.Split(' ')[0] + " " + context.ФИО.Split(' ')[1][0] + '.' + ' ' + context.ФИО.Split(' ')[2][0] + '.')</MudTd>
                </RowTemplate>
            </MudTable>
            </div>
            <div class="div2">
                <MudTable Items="groups" Hover="true" OnRowClick="OpenGroup" T="MainGroupsTableInfoModel" FixedHeader="true" Height="600px">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Название группы</MudTh>
                        <MudTh>Учен</MudTh>
                        <MudTh>Начало</MudTh>
                        <MudTh>Практ</MudTh>
                        <MudTh>Окончание</MudTh>
                        <MudTh>Ч.тр.</MudTh>
                        <MudTh>Ч.пр.</MudTh>
                        <MudTh>Тип</MudTh>
                        </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.id</MudTd>
                        <MudTd DataLabel="Название группы">@context.Программа_обучения</MudTd>
                        <MudTd DataLabel="Учен">@context.Учен</MudTd>
                        <MudTd DataLabel="Начало">@context.Нач</MudTd>
                        <MudTd DataLabel="Практ">@context.Практ</MudTd>
                        <MudTd DataLabel="Окончание">@context.Окончание</MudTd>
                        <MudTd DataLabel="Ч.тр.">@context.Теор</MudTd>
                        <MudTd DataLabel="Ч.пр.">@context.Час_практики</MudTd>
                        <MudTd DataLabel="Тип">@context.Тип</MudTd>
                    </RowTemplate>
                    <FooterContent>
                        <MudTd>Id</MudTd>
                        <MudTd>Название группы</MudTd>
                        <MudTd>Учен</MudTd>
                        <MudTd>Начало</MudTd>
                        <MudTd>Практ</MudTd>
                        <MudTd>Окончание</MudTd>
                        <MudTd>Ч.тр.</MudTd>
                        <MudTd>Ч.пр.</MudTd>
                        <MudTd>Тип</MudTd>
                    </FooterContent>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                </MudTable>
            </div>
        </div>
}

@code
{
    int subdivisionId = 4;
    private int selectedRowNumber = -1;

    private MudTable<EmployeeModel> mudTable;
    private List<SubdivisionModel>? subdivisions;
    private List<EmployeeModel>? employees;
    private List<MainGroupsTableInfoModel>? groups;

    protected override async Task OnInitializedAsync()
    {
        subdivisions = await _subdivisions.GetAllSubdivisions();
        employees = await _employees.GetEmployeeByCodeSubdivision(subdivisionId);
    }

    private string SelectedRowClassFunc(EmployeeModel employee, int rowNum)
    {
        if (selectedRowNumber == rowNum)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(employee))
        {
            selectedRowNumber = rowNum;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    public async void OnChangeValueSubdivision(int i)
    {
        subdivisionId = i;
        employees?.Clear();
        employees = await _employees.GetEmployeeByCodeSubdivision(subdivisionId);
        this.StateHasChanged();
    }

    public async void SelectionWorkerChanged(TableRowClickEventArgs<EmployeeModel> args)
    {
        if (args != null)
        {
            groups?.Clear();
            
            groups = await _groups.getAllGroupsForMainTable(args.Item.Код);
            this.StateHasChanged();  
        }
    }

    public void OpenGroup(TableRowClickEventArgs<MainGroupsTableInfoModel> args)
    {
        var group = args.Item as MainGroupsTableInfoModel;
        if (group != null)
        {
            NavigationManager.NavigateTo("/groups/" + group.id);
        }
    }
}  